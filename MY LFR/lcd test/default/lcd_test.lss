
lcd_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000414  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00000414  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000092  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007b8  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000290  00000000  00000000  00000dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005f9  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000015e  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003a9  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  00001be3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 31       	cpi	r26, 0x10	; 16
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 08 02 	jmp	0x410	; 0x410 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>

#include "lcd.h"

void main()
{
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
   unsigned char i;

   //Initialize LCD module
   LCDInit(LS_BLINK|LS_ULINE);
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	0e 94 a0 01 	call	0x340	; 0x340 <LCDInit>

   //Clear the screen
   LCDClear();
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>

   //Simple string printing
   LCDWriteString("Congrats ");
  98:	80 e6       	ldi	r24, 0x60	; 96
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	0e 94 8e 01 	call	0x31c	; 0x31c <LCDGotoXY>
  a8:	8a e6       	ldi	r24, 0x6A	; 106
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>
  b0:	c0 e0       	ldi	r28, 0x00	; 0
  b2:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	10 e0       	ldi	r17, 0x00	; 0

   //Print some numbers
   for (i=0;i<99;i+=1)
   {
      LCDWriteIntXY(9,1,i,3);
  b8:	89 e0       	ldi	r24, 0x09	; 9
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	0e 94 8e 01 	call	0x31c	; 0x31c <LCDGotoXY>
  c0:	ce 01       	movw	r24, r28
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	0e 94 30 01 	call	0x260	; 0x260 <LCDWriteInt>
      LCDWriteStringXY(12,1,"% ");
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	0e 94 8e 01 	call	0x31c	; 0x31c <LCDGotoXY>
  d2:	83 e7       	ldi	r24, 0x73	; 115
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>
  da:	c8 01       	movw	r24, r16
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x5a>

   //A string on line 2
   LCDWriteStringXY(0,1,"Loading ");

   //Print some numbers
   for (i=0;i<99;i+=1)
  e0:	c8 01       	movw	r24, r16
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x60>
  e6:	c8 01       	movw	r24, r16
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x66>
  ec:	c8 01       	movw	r24, r16
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x6c>
  f2:	21 96       	adiw	r28, 0x01	; 1
  f4:	c3 36       	cpi	r28, 0x63	; 99
  f6:	d1 05       	cpc	r29, r1
  f8:	f9 f6       	brne	.-66     	; 0xb8 <main+0x36>
      _delay_loop_2(0);

   }

   //Clear the screen
   LCDClear();
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>

   //Some more text

   LCDWriteString("Hello world");
 102:	86 e7       	ldi	r24, 0x76	; 118
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>
   LCDWriteStringXY(0,1,"By YourName Here");    // <--- Write ur NAME HERE !!!!!!!!!!!
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	0e 94 8e 01 	call	0x31c	; 0x31c <LCDGotoXY>
 112:	82 e8       	ldi	r24, 0x82	; 130
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ca 01       	movw	r24, r20
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0xa0>

   //Wait
   for(i=0;i<100;i++) _delay_loop_2(0);
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	24 36       	cpi	r18, 0x64	; 100
 12a:	d1 f7       	brne	.-12     	; 0x120 <main+0x9e>

   //Some More ......
   LCDClear();
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>
   LCDWriteString("    eXtreme");
 134:	83 e9       	ldi	r24, 0x93	; 147
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>
   LCDWriteStringXY(0,1,"  Electronics");
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	0e 94 8e 01 	call	0x31c	; 0x31c <LCDGotoXY>
 144:	8f e9       	ldi	r24, 0x9F	; 159
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	ca 01       	movw	r24, r20
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0xd2>

	//Wait
   for(i=0;i<100;i++) _delay_loop_2(0);
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	24 36       	cpi	r18, 0x64	; 100
 15c:	d1 f7       	brne	.-12     	; 0x152 <main+0xd0>

   //Custom Chars ......
   LCDClear();
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>
   LCDWriteString("Custom Char !!!");
 166:	8d ea       	ldi	r24, 0xAD	; 173
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>
   LCDWriteStringXY(0,1,"%0%1%2%3 %4%5%6%7");
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	0e 94 8e 01 	call	0x31c	; 0x31c <LCDGotoXY>
 176:	8d eb       	ldi	r24, 0xBD	; 189
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 16 01 	call	0x22c	; 0x22c <LCDWriteString>

}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 188:	87 b3       	in	r24, 0x17	; 23
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 18e:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 190:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	c4 9a       	sbi	0x18, 4	; 24
 19c:	82 2f       	mov	r24, r18
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 1a2:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 1a4:	82 95       	swap	r24
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	92 2f       	mov	r25, r18
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1ae:	c4 98       	cbi	0x18, 4	; 24
 1b0:	92 2f       	mov	r25, r18
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 1b6:	c4 9a       	sbi	0x18, 4	; 24
 1b8:	92 2f       	mov	r25, r18
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 1be:	96 b3       	in	r25, 0x16	; 22
 1c0:	92 2f       	mov	r25, r18
 1c2:	9a 95       	dec	r25
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1c6:	c4 98       	cbi	0x18, 4	; 24
 1c8:	92 2f       	mov	r25, r18
 1ca:	9a 95       	dec	r25
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 1ce:	87 fd       	sbrc	r24, 7
 1d0:	e4 cf       	rjmp	.-56     	; 0x19a <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 1d2:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 1d4:	87 b3       	in	r24, 0x17	; 23
 1d6:	8f 60       	ori	r24, 0x0F	; 15
 1d8:	87 bb       	out	0x17, r24	; 23

}
 1da:	08 95       	ret

000001dc <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
 1dc:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 1de:	66 23       	and	r22, r22
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <LCDByte+0xa>
	CLEAR_RS();
 1e2:	93 98       	cbi	0x12, 3	; 18
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <LCDByte+0xc>
else
	SET_RS();
 1e6:	93 9a       	sbi	0x12, 3	; 18
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	82 2f       	mov	r24, r18
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 1f0:	c4 9a       	sbi	0x18, 4	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 1f2:	88 b3       	in	r24, 0x18	; 24
 1f4:	93 2f       	mov	r25, r19
 1f6:	92 95       	swap	r25
 1f8:	9f 70       	andi	r25, 0x0F	; 15
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1fe:	98 bb       	out	0x18, r25	; 24
 200:	82 2f       	mov	r24, r18
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 206:	c4 98       	cbi	0x18, 4	; 24
 208:	82 2f       	mov	r24, r18
 20a:	8a 95       	dec	r24
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 20e:	c4 9a       	sbi	0x18, 4	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 210:	88 b3       	in	r24, 0x18	; 24
 212:	3f 70       	andi	r19, 0x0F	; 15
 214:	80 7f       	andi	r24, 0xF0	; 240
 216:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 218:	88 bb       	out	0x18, r24	; 24
 21a:	82 2f       	mov	r24, r18
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 220:	c4 98       	cbi	0x18, 4	; 24
 222:	2a 95       	dec	r18
 224:	f1 f7       	brne	.-4      	; 0x222 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 226:	0e 94 c4 00 	call	0x188	; 0x188 <LCDBusyLoop>
}
 22a:	08 95       	ret

0000022c <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	ec 01       	movw	r28, r24
 232:	10 c0       	rjmp	.+32     	; 0x254 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 234:	85 32       	cpi	r24, 0x25	; 37
 236:	51 f4       	brne	.+20     	; 0x24c <LCDWriteString+0x20>
	{
		msg++;
 238:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 23a:	88 81       	ld	r24, Y
 23c:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 23e:	88 30       	cpi	r24, 0x08	; 8
 240:	28 f0       	brcs	.+10     	; 0x24c <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>
			LCDData(*msg);
 24a:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>
	}
	msg++;
 252:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	69 f7       	brne	.-38     	; 0x234 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	00 d0       	rcall	.+0      	; 0x26e <LCDWriteInt+0xe>
 26e:	00 d0       	rcall	.+0      	; 0x270 <LCDWriteInt+0x10>
 270:	0f 92       	push	r0
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	9c 01       	movw	r18, r24
 278:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 27a:	fe 01       	movw	r30, r28
 27c:	31 96       	adiw	r30, 0x01	; 1
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	df 01       	movw	r26, r30
 282:	1d 92       	st	X+, r1
 284:	8a 95       	dec	r24
 286:	e9 f7       	brne	.-6      	; 0x282 <LCDWriteInt+0x22>
 288:	fe 01       	movw	r30, r28
 28a:	35 96       	adiw	r30, 0x05	; 5
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 28e:	c9 01       	movw	r24, r18
 290:	6a e0       	ldi	r22, 0x0A	; 10
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divmodhi4>
 298:	80 83       	st	Z, r24
	val=val/10;
 29a:	c9 01       	movw	r24, r18
 29c:	6a e0       	ldi	r22, 0x0A	; 10
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__divmodhi4>
 2a4:	9b 01       	movw	r18, r22
 2a6:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2a8:	21 15       	cp	r18, r1
 2aa:	31 05       	cpc	r19, r1
 2ac:	81 f7       	brne	.-32     	; 0x28e <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2ae:	bf ef       	ldi	r27, 0xFF	; 255
 2b0:	0f 3f       	cpi	r16, 0xFF	; 255
 2b2:	1b 07       	cpc	r17, r27
 2b4:	79 f4       	brne	.+30     	; 0x2d4 <LCDWriteInt+0x74>
 2b6:	20 e0       	ldi	r18, 0x00	; 0
 2b8:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 2ba:	ae 01       	movw	r20, r28
 2bc:	4f 5f       	subi	r20, 0xFF	; 255
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <LCDWriteInt+0x66>
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
 2c6:	fa 01       	movw	r30, r20
 2c8:	e2 0f       	add	r30, r18
 2ca:	f3 1f       	adc	r31, r19
 2cc:	80 81       	ld	r24, Z
 2ce:	88 23       	and	r24, r24
 2d0:	c1 f3       	breq	.-16     	; 0x2c2 <LCDWriteInt+0x62>
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 2d4:	25 e0       	ldi	r18, 0x05	; 5
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	20 1b       	sub	r18, r16
 2da:	31 0b       	sbc	r19, r17
 2dc:	7e 01       	movw	r14, r28
 2de:	08 94       	sec
 2e0:	e1 1c       	adc	r14, r1
 2e2:	f1 1c       	adc	r15, r1
 2e4:	e2 0e       	add	r14, r18
 2e6:	f3 1e       	adc	r15, r19
 2e8:	89 01       	movw	r16, r18
 2ea:	09 c0       	rjmp	.+18     	; 0x2fe <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2ec:	f7 01       	movw	r30, r14
 2ee:	81 91       	ld	r24, Z+
 2f0:	7f 01       	movw	r14, r30
 2f2:	80 5d       	subi	r24, 0xD0	; 208
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2fa:	0f 5f       	subi	r16, 0xFF	; 255
 2fc:	1f 4f       	sbci	r17, 0xFF	; 255
 2fe:	05 30       	cpi	r16, 0x05	; 5
 300:	11 05       	cpc	r17, r1
 302:	a4 f3       	brlt	.-24     	; 0x2ec <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	08 95       	ret

0000031c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 31c:	84 31       	cpi	r24, 0x14	; 20
 31e:	78 f4       	brcc	.+30     	; 0x33e <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 320:	62 30       	cpi	r22, 0x02	; 2
 322:	31 f0       	breq	.+12     	; 0x330 <LCDGotoXY+0x14>
 324:	63 30       	cpi	r22, 0x03	; 3
 326:	31 f0       	breq	.+12     	; 0x334 <LCDGotoXY+0x18>
 328:	61 30       	cpi	r22, 0x01	; 1
 32a:	29 f4       	brne	.+10     	; 0x336 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 32c:	80 64       	ori	r24, 0x40	; 64
 32e:	03 c0       	rjmp	.+6      	; 0x336 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 330:	8c 5e       	subi	r24, 0xEC	; 236
 332:	01 c0       	rjmp	.+2      	; 0x336 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 334:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 336:	80 68       	ori	r24, 0x80	; 128
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>
 33e:	08 95       	ret

00000340 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 348:	8c e4       	ldi	r24, 0x4C	; 76
 34a:	9d e1       	ldi	r25, 0x1D	; 29
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 350:	87 b3       	in	r24, 0x17	; 23
 352:	8f 60       	ori	r24, 0x0F	; 15
 354:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 356:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 358:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 35a:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 35c:	88 b3       	in	r24, 0x18	; 24
 35e:	80 7f       	andi	r24, 0xF0	; 240
 360:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 362:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 364:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 366:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	98 2f       	mov	r25, r24
 36c:	9a 95       	dec	r25
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 370:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 372:	c1 9a       	sbi	0x18, 1	; 24
 374:	98 2f       	mov	r25, r24
 376:	9a 95       	dec	r25
 378:	f1 f7       	brne	.-4      	; 0x376 <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
 37a:	c4 98       	cbi	0x18, 4	; 24
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 380:	0e 94 c4 00 	call	0x188	; 0x188 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 384:	81 2f       	mov	r24, r17
 386:	8c 60       	ori	r24, 0x0C	; 12
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 38e:	88 e2       	ldi	r24, 0x28	; 40
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 396:	80 e4       	ldi	r24, 0x40	; 64
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>
 39e:	cf ec       	ldi	r28, 0xCF	; 207
 3a0:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 3a2:	89 91       	ld	r24, Y+
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	cf 30       	cpi	r28, 0x0F	; 15
 3ae:	d8 07       	cpc	r29, r24
 3b0:	c1 f7       	brne	.-16     	; 0x3a2 <LCDInit+0x62>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	0e 94 8e 01 	call	0x31c	; 0x31c <LCDGotoXY>

}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	08 95       	ret

000003c2 <__divmodhi4>:
 3c2:	97 fb       	bst	r25, 7
 3c4:	09 2e       	mov	r0, r25
 3c6:	07 26       	eor	r0, r23
 3c8:	0a d0       	rcall	.+20     	; 0x3de <__divmodhi4_neg1>
 3ca:	77 fd       	sbrc	r23, 7
 3cc:	04 d0       	rcall	.+8      	; 0x3d6 <__divmodhi4_neg2>
 3ce:	0c d0       	rcall	.+24     	; 0x3e8 <__udivmodhi4>
 3d0:	06 d0       	rcall	.+12     	; 0x3de <__divmodhi4_neg1>
 3d2:	00 20       	and	r0, r0
 3d4:	1a f4       	brpl	.+6      	; 0x3dc <__divmodhi4_exit>

000003d6 <__divmodhi4_neg2>:
 3d6:	70 95       	com	r23
 3d8:	61 95       	neg	r22
 3da:	7f 4f       	sbci	r23, 0xFF	; 255

000003dc <__divmodhi4_exit>:
 3dc:	08 95       	ret

000003de <__divmodhi4_neg1>:
 3de:	f6 f7       	brtc	.-4      	; 0x3dc <__divmodhi4_exit>
 3e0:	90 95       	com	r25
 3e2:	81 95       	neg	r24
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	08 95       	ret

000003e8 <__udivmodhi4>:
 3e8:	aa 1b       	sub	r26, r26
 3ea:	bb 1b       	sub	r27, r27
 3ec:	51 e1       	ldi	r21, 0x11	; 17
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__udivmodhi4_ep>

000003f0 <__udivmodhi4_loop>:
 3f0:	aa 1f       	adc	r26, r26
 3f2:	bb 1f       	adc	r27, r27
 3f4:	a6 17       	cp	r26, r22
 3f6:	b7 07       	cpc	r27, r23
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__udivmodhi4_ep>
 3fa:	a6 1b       	sub	r26, r22
 3fc:	b7 0b       	sbc	r27, r23

000003fe <__udivmodhi4_ep>:
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	5a 95       	dec	r21
 404:	a9 f7       	brne	.-22     	; 0x3f0 <__udivmodhi4_loop>
 406:	80 95       	com	r24
 408:	90 95       	com	r25
 40a:	bc 01       	movw	r22, r24
 40c:	cd 01       	movw	r24, r26
 40e:	08 95       	ret

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
