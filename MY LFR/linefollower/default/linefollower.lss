
linefollower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000668  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  00000668  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008000b4  008000b4  00000750  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ca  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090d  00000000  00000000  0000095a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000311  00000000  00000000  00001267  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006db  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023d  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036b  00000000  00000000  00001fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 eb       	ldi	r26, 0xB4	; 180
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3d       	cpi	r26, 0xDC	; 220
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
  8a:	0c 94 32 03 	jmp	0x664	; 0x664 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motor>:
int left_speed=200;
int set_point=0;

int motor(int pl,int pr)
{
  powerr=pr;
  92:	79 bd       	out	0x29, r23	; 41
  94:	68 bd       	out	0x28, r22	; 40
  powerl=pl;
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
}
  9a:	08 95       	ret

0000009c <motor_init>:
void motor_init()
{
  ICR1=20000;
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	9e e4       	ldi	r25, 0x4E	; 78
  a0:	97 bd       	out	0x27, r25	; 39
  a2:	86 bd       	out	0x26, r24	; 38
  DDRD|=(1<<PD4)|(1<<PD5);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 63       	ori	r24, 0x30	; 48
  a8:	81 bb       	out	0x11, r24	; 17
  //  the pins pd4 and pd5 for the PWM
  DDRD|=(1<<PD0)|(1<<PD1)|(1<<PD2)|(1<<PD3);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	81 bb       	out	0x11, r24	; 17
  PORTD=(1<<PD0)|(0<<PD1)|(1<<PD2)|(0<<PD3);
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	82 bb       	out	0x12, r24	; 18
  PORTD|=(0<<PD4)|(0<<PD5);
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	82 bb       	out	0x12, r24	; 18
  TCCR1A|=(0<<COM1A0)|(1<<COM1A1)|(0<<COM1B0)|(1<<COM1B1)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(1<<WGM10);
  b8:	8f b5       	in	r24, 0x2f	; 47
  ba:	81 6a       	ori	r24, 0xA1	; 161
  bc:	8f bd       	out	0x2f, r24	; 47
  TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	8a 60       	ori	r24, 0x0A	; 10
  c2:	8e bd       	out	0x2e, r24	; 46
}
  c4:	08 95       	ret

000000c6 <sensor_init>:
void sensor_init()
{
  //Port A pins as input for sensors
  DDRA=0X00;
  c6:	1a ba       	out	0x1a, r1	; 26
  //Enable internal pull ups
  PORTA=0XFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8b bb       	out	0x1b, r24	; 27
}
  cc:	08 95       	ret

000000ce <sensor_read>:
  LCDInit(LS_BLINK|LS_ULINE);
  LCDClear();
}
int sensor_read(int j)
{
 if(j==0)
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	51 f1       	breq	.+84     	; 0x126 <sensor_read+0x58>
 {

 return PINA0;
 }
 else if(j==1)
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	19 f4       	brne	.+6      	; 0xde <sensor_read+0x10>
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	26 c0       	rjmp	.+76     	; 0x12a <sensor_read+0x5c>
 {
     return(PINA1);
}
else if(j==2)
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	91 05       	cpc	r25, r1
  e2:	19 f4       	brne	.+6      	; 0xea <sensor_read+0x1c>
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	20 c0       	rjmp	.+64     	; 0x12a <sensor_read+0x5c>
{
    return(PINA2);
}
else if(j==3)
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	91 05       	cpc	r25, r1
  ee:	19 f4       	brne	.+6      	; 0xf6 <sensor_read+0x28>
  f0:	23 e0       	ldi	r18, 0x03	; 3
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	1a c0       	rjmp	.+52     	; 0x12a <sensor_read+0x5c>
{
    return(PINA3);
}
else if(j==4)
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	91 05       	cpc	r25, r1
  fa:	19 f4       	brne	.+6      	; 0x102 <sensor_read+0x34>
  fc:	24 e0       	ldi	r18, 0x04	; 4
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	14 c0       	rjmp	.+40     	; 0x12a <sensor_read+0x5c>
{
    return(PINA4);
}
else if(j==5)
 102:	85 30       	cpi	r24, 0x05	; 5
 104:	91 05       	cpc	r25, r1
 106:	19 f4       	brne	.+6      	; 0x10e <sensor_read+0x40>
 108:	25 e0       	ldi	r18, 0x05	; 5
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	0e c0       	rjmp	.+28     	; 0x12a <sensor_read+0x5c>
{
    return(PINA5);
}
else if(j==6)
 10e:	86 30       	cpi	r24, 0x06	; 6
 110:	91 05       	cpc	r25, r1
 112:	19 f4       	brne	.+6      	; 0x11a <sensor_read+0x4c>
 114:	26 e0       	ldi	r18, 0x06	; 6
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	08 c0       	rjmp	.+16     	; 0x12a <sensor_read+0x5c>
{
    return(PINA6);
}
else if(j==7)
 11a:	07 97       	sbiw	r24, 0x07	; 7
 11c:	19 f4       	brne	.+6      	; 0x124 <sensor_read+0x56>
 11e:	27 e0       	ldi	r18, 0x07	; 7
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	03 c0       	rjmp	.+6      	; 0x12a <sensor_read+0x5c>
 124:	08 95       	ret
{
    return(PINA7);
}
}
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	c9 01       	movw	r24, r18
 12c:	08 95       	ret

0000012e <sensor_cal>:
void sensor_cal()
{
 12e:	8f 92       	push	r8
 130:	9f 92       	push	r9
 132:	af 92       	push	r10
 134:	bf 92       	push	r11
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	c0 90 b8 00 	lds	r12, 0x00B8
 14a:	d0 90 b9 00 	lds	r13, 0x00B9
 14e:	e0 90 b4 00 	lds	r14, 0x00B4
 152:	f0 90 b5 00 	lds	r15, 0x00B5
 156:	00 91 b6 00 	lds	r16, 0x00B6
 15a:	10 91 b7 00 	lds	r17, 0x00B7
 15e:	9c ec       	ldi	r25, 0xCC	; 204
 160:	a9 2e       	mov	r10, r25
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	b9 2e       	mov	r11, r25
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
    int i=0;
    for(i=0;i<8;i++)
    {
        sensor[i]=sensor_read(i);
        sensor_avarage=sensor_avarage+sensor[i]*i*1000;
 16a:	88 ee       	ldi	r24, 0xE8	; 232
 16c:	88 2e       	mov	r8, r24
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	98 2e       	mov	r9, r24
void sensor_cal()
{
    int i=0;
    for(i=0;i<8;i++)
    {
        sensor[i]=sensor_read(i);
 172:	ce 01       	movw	r24, r28
 174:	0e 94 67 00 	call	0xce	; 0xce <sensor_read>
 178:	f5 01       	movw	r30, r10
 17a:	81 93       	st	Z+, r24
 17c:	91 93       	st	Z+, r25
 17e:	5f 01       	movw	r10, r30
        sensor_avarage=sensor_avarage+sensor[i]*i*1000;
 180:	88 9d       	mul	r24, r8
 182:	90 01       	movw	r18, r0
 184:	89 9d       	mul	r24, r9
 186:	30 0d       	add	r19, r0
 188:	98 9d       	mul	r25, r8
 18a:	30 0d       	add	r19, r0
 18c:	11 24       	eor	r1, r1
 18e:	a9 01       	movw	r20, r18
 190:	4c 9f       	mul	r20, r28
 192:	90 01       	movw	r18, r0
 194:	4d 9f       	mul	r20, r29
 196:	30 0d       	add	r19, r0
 198:	5c 9f       	mul	r21, r28
 19a:	30 0d       	add	r19, r0
 19c:	11 24       	eor	r1, r1
 19e:	44 27       	eor	r20, r20
 1a0:	37 fd       	sbrc	r19, 7
 1a2:	40 95       	com	r20
 1a4:	54 2f       	mov	r21, r20
 1a6:	e2 0e       	add	r14, r18
 1a8:	f3 1e       	adc	r15, r19
 1aa:	04 1f       	adc	r16, r20
 1ac:	15 1f       	adc	r17, r21
        sensor_sum+=(int)(sensor[i]);
 1ae:	c8 0e       	add	r12, r24
 1b0:	d9 1e       	adc	r13, r25
}
}
void sensor_cal()
{
    int i=0;
    for(i=0;i<8;i++)
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	c8 30       	cpi	r28, 0x08	; 8
 1b6:	d1 05       	cpc	r29, r1
 1b8:	e1 f6       	brne	.-72     	; 0x172 <sensor_cal+0x44>
 1ba:	d0 92 b9 00 	sts	0x00B9, r13
 1be:	c0 92 b8 00 	sts	0x00B8, r12
 1c2:	e0 92 b4 00 	sts	0x00B4, r14
 1c6:	f0 92 b5 00 	sts	0x00B5, r15
 1ca:	00 93 b6 00 	sts	0x00B6, r16
 1ce:	10 93 b7 00 	sts	0x00B7, r17


    }


}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	bf 90       	pop	r11
 1e4:	af 90       	pop	r10
 1e6:	9f 90       	pop	r9
 1e8:	8f 90       	pop	r8
 1ea:	08 95       	ret

000001ec <pid_calc>:
 void pid_calc()
    {
        position=(sensor_avarage/sensor_sum);
 1ec:	20 91 b8 00 	lds	r18, 0x00B8
 1f0:	30 91 b9 00 	lds	r19, 0x00B9
 1f4:	44 27       	eor	r20, r20
 1f6:	37 fd       	sbrc	r19, 7
 1f8:	40 95       	com	r20
 1fa:	54 2f       	mov	r21, r20
 1fc:	60 91 b4 00 	lds	r22, 0x00B4
 200:	70 91 b5 00 	lds	r23, 0x00B5
 204:	80 91 b6 00 	lds	r24, 0x00B6
 208:	90 91 b7 00 	lds	r25, 0x00B7
 20c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__divmodsi4>
 210:	b9 01       	movw	r22, r18
 212:	30 93 bb 00 	sts	0x00BB, r19
 216:	20 93 ba 00 	sts	0x00BA, r18
        proportional = position-set_point;  // Replace set_point by your set point
 21a:	80 91 ca 00 	lds	r24, 0x00CA
 21e:	90 91 cb 00 	lds	r25, 0x00CB
 222:	68 1b       	sub	r22, r24
 224:	79 0b       	sbc	r23, r25
 226:	70 93 bd 00 	sts	0x00BD, r23
 22a:	60 93 bc 00 	sts	0x00BC, r22
        integral = integral + proportional;
 22e:	80 91 be 00 	lds	r24, 0x00BE
 232:	90 91 bf 00 	lds	r25, 0x00BF
 236:	86 0f       	add	r24, r22
 238:	97 1f       	adc	r25, r23
 23a:	90 93 bf 00 	sts	0x00BF, r25
 23e:	80 93 be 00 	sts	0x00BE, r24
        derivative = proportional - last_proportional;
 242:	20 91 c0 00 	lds	r18, 0x00C0
 246:	30 91 c1 00 	lds	r19, 0x00C1
 24a:	ab 01       	movw	r20, r22
 24c:	42 1b       	sub	r20, r18
 24e:	53 0b       	sbc	r21, r19
 250:	50 93 c3 00 	sts	0x00C3, r21
 254:	40 93 c2 00 	sts	0x00C2, r20
        last_proportional = proportional;
 258:	70 93 c1 00 	sts	0x00C1, r23
 25c:	60 93 c0 00 	sts	0x00C0, r22
        error_value =(proportional * Kp + integral * Ki + derivative * Kd);
 260:	84 0f       	add	r24, r20
 262:	95 1f       	adc	r25, r21
 264:	86 0f       	add	r24, r22
 266:	97 1f       	adc	r25, r23
 268:	90 93 c5 00 	sts	0x00C5, r25
 26c:	80 93 c4 00 	sts	0x00C4, r24
    }
 270:	08 95       	ret

00000272 <calc_turn>:
void calc_turn()
{ //Restricting the error value between +256.
 if (error_value < -255)
 272:	80 91 c4 00 	lds	r24, 0x00C4
 276:	90 91 c5 00 	lds	r25, 0x00C5
 27a:	81 50       	subi	r24, 0x01	; 1
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	34 f4       	brge	.+12     	; 0x28c <calc_turn+0x1a>
 {
 error_value = -255;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	9f ef       	ldi	r25, 0xFF	; 255
 284:	90 93 c5 00 	sts	0x00C5, r25
 288:	80 93 c4 00 	sts	0x00C4, r24
 }
if (error_value > 255)
 28c:	80 91 c4 00 	lds	r24, 0x00C4
 290:	90 91 c5 00 	lds	r25, 0x00C5
 294:	8f 3f       	cpi	r24, 0xFF	; 255
 296:	91 05       	cpc	r25, r1
 298:	39 f0       	breq	.+14     	; 0x2a8 <calc_turn+0x36>
 29a:	34 f0       	brlt	.+12     	; 0x2a8 <calc_turn+0x36>
{
error_value = 255;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 c5 00 	sts	0x00C5, r25
 2a4:	80 93 c4 00 	sts	0x00C4, r24
}
// If error_value is less than zero calculate right turn speed values
if (error_value < 0)
 2a8:	20 91 c4 00 	lds	r18, 0x00C4
 2ac:	30 91 c5 00 	lds	r19, 0x00C5
left_speed = max_speed;
}
// If error_value is greater than zero calculate left turn values

{
right_speed = max_speed;
 2b0:	80 91 c8 00 	lds	r24, 0x00C8
 2b4:	90 91 c9 00 	lds	r25, 0x00C9
 2b8:	90 93 c7 00 	sts	0x00C7, r25
 2bc:	80 93 c6 00 	sts	0x00C6, r24
left_speed = max_speed - error_value;
 2c0:	82 1b       	sub	r24, r18
 2c2:	93 0b       	sbc	r25, r19
 2c4:	90 93 73 00 	sts	0x0073, r25
 2c8:	80 93 72 00 	sts	0x0072, r24
}
}
 2cc:	08 95       	ret

000002ce <lcd_init>:
  //Enable internal pull ups
  PORTA=0XFF;
}
void lcd_init()
{
  LCDInit(LS_BLINK|LS_ULINE);
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 8d 02 	call	0x51a	; 0x51a <LCDInit>
  LCDClear();
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>
}
 2dc:	08 95       	ret

000002de <main>:
  TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
}
void sensor_init()
{
  //Port A pins as input for sensors
  DDRA=0X00;
 2de:	1a ba       	out	0x1a, r1	; 26
  //Enable internal pull ups
  PORTA=0XFF;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	8b bb       	out	0x1b, r24	; 27
}
void main()
{

  sensor_init();
  motor_init();
 2e4:	0e 94 4e 00 	call	0x9c	; 0x9c <motor_init>
  lcd_init();
 2e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_init>
  while(1)
  {
      sensor_cal();
 2ec:	0e 94 97 00 	call	0x12e	; 0x12e <sensor_cal>
      pid_calc();
 2f0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <pid_calc>
      calc_turn();
 2f4:	0e 94 39 01 	call	0x272	; 0x272 <calc_turn>
int left_speed=200;
int set_point=0;

int motor(int pl,int pr)
{
  powerr=pr;
 2f8:	80 91 c6 00 	lds	r24, 0x00C6
 2fc:	90 91 c7 00 	lds	r25, 0x00C7
 300:	99 bd       	out	0x29, r25	; 41
 302:	88 bd       	out	0x28, r24	; 40
  powerl=pl;
 304:	80 91 72 00 	lds	r24, 0x0072
 308:	90 91 73 00 	lds	r25, 0x0073
 30c:	9b bd       	out	0x2b, r25	; 43
 30e:	8a bd       	out	0x2a, r24	; 42
  {
      sensor_cal();
      pid_calc();
      calc_turn();
      motor(left_speed,right_speed);
	  LCDWriteStringXY(0,0,"LM SPEED");
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCDGotoXY>
 318:	80 e6       	ldi	r24, 0x60	; 96
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 03 02 	call	0x406	; 0x406 <LCDWriteString>
	  LCDWriteStringXY(9,0,"RM SPEED");
 320:	89 e0       	ldi	r24, 0x09	; 9
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCDGotoXY>
 328:	89 e6       	ldi	r24, 0x69	; 105
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 03 02 	call	0x406	; 0x406 <LCDWriteString>
	  LCDWriteIntXY(0,1,left_speed,5);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCDGotoXY>
 338:	80 91 72 00 	lds	r24, 0x0072
 33c:	90 91 73 00 	lds	r25, 0x0073
 340:	65 e0       	ldi	r22, 0x05	; 5
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDWriteInt>
	  LCDWriteIntXY(9,1,right_speed,5);
 348:	89 e0       	ldi	r24, 0x09	; 9
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCDGotoXY>
 350:	80 91 c6 00 	lds	r24, 0x00C6
 354:	90 91 c7 00 	lds	r25, 0x00C7
 358:	65 e0       	ldi	r22, 0x05	; 5
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDWriteInt>
 360:	c5 cf       	rjmp	.-118    	; 0x2ec <main+0xe>

00000362 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 362:	84 b3       	in	r24, 0x14	; 20
 364:	80 7f       	andi	r24, 0xF0	; 240
 366:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 368:	ae 9a       	sbi	0x15, 6	; 21
	CLEAR_RS();		//Read status
 36a:	ad 98       	cbi	0x15, 5	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	ac 9a       	sbi	0x15, 4	; 21
 376:	82 2f       	mov	r24, r18
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 37c:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 37e:	82 95       	swap	r24
 380:	80 7f       	andi	r24, 0xF0	; 240
 382:	92 2f       	mov	r25, r18
 384:	9a 95       	dec	r25
 386:	f1 f7       	brne	.-4      	; 0x384 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 388:	ac 98       	cbi	0x15, 4	; 21
 38a:	92 2f       	mov	r25, r18
 38c:	9a 95       	dec	r25
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 390:	ac 9a       	sbi	0x15, 4	; 21
 392:	92 2f       	mov	r25, r18
 394:	9a 95       	dec	r25
 396:	f1 f7       	brne	.-4      	; 0x394 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 398:	93 b3       	in	r25, 0x13	; 19
 39a:	92 2f       	mov	r25, r18
 39c:	9a 95       	dec	r25
 39e:	f1 f7       	brne	.-4      	; 0x39c <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 3a0:	ac 98       	cbi	0x15, 4	; 21
 3a2:	92 2f       	mov	r25, r18
 3a4:	9a 95       	dec	r25
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 3a8:	87 fd       	sbrc	r24, 7
 3aa:	e4 cf       	rjmp	.-56     	; 0x374 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 3ac:	ae 98       	cbi	0x15, 6	; 21
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 3ae:	84 b3       	in	r24, 0x14	; 20
 3b0:	8f 60       	ori	r24, 0x0F	; 15
 3b2:	84 bb       	out	0x14, r24	; 20

}
 3b4:	08 95       	ret

000003b6 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
 3b6:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 3b8:	66 23       	and	r22, r22
 3ba:	11 f4       	brne	.+4      	; 0x3c0 <LCDByte+0xa>
	CLEAR_RS();
 3bc:	ad 98       	cbi	0x15, 5	; 21
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <LCDByte+0xc>
else
	SET_RS();
 3c0:	ad 9a       	sbi	0x15, 5	; 21
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	82 2f       	mov	r24, r18
 3c6:	8a 95       	dec	r24
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 3ca:	ac 9a       	sbi	0x15, 4	; 21

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 3cc:	85 b3       	in	r24, 0x15	; 21
 3ce:	93 2f       	mov	r25, r19
 3d0:	92 95       	swap	r25
 3d2:	9f 70       	andi	r25, 0x0F	; 15
 3d4:	80 7f       	andi	r24, 0xF0	; 240
 3d6:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 3d8:	95 bb       	out	0x15, r25	; 21
 3da:	82 2f       	mov	r24, r18
 3dc:	8a 95       	dec	r24
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 3e0:	ac 98       	cbi	0x15, 4	; 21
 3e2:	82 2f       	mov	r24, r18
 3e4:	8a 95       	dec	r24
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 3e8:	ac 9a       	sbi	0x15, 4	; 21

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 3ea:	85 b3       	in	r24, 0x15	; 21
 3ec:	3f 70       	andi	r19, 0x0F	; 15
 3ee:	80 7f       	andi	r24, 0xF0	; 240
 3f0:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 3f2:	85 bb       	out	0x15, r24	; 21
 3f4:	82 2f       	mov	r24, r18
 3f6:	8a 95       	dec	r24
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 3fa:	ac 98       	cbi	0x15, 4	; 21
 3fc:	2a 95       	dec	r18
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 400:	0e 94 b1 01 	call	0x362	; 0x362 <LCDBusyLoop>
}
 404:	08 95       	ret

00000406 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	ec 01       	movw	r28, r24
 40c:	10 c0       	rjmp	.+32     	; 0x42e <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 40e:	85 32       	cpi	r24, 0x25	; 37
 410:	51 f4       	brne	.+20     	; 0x426 <LCDWriteString+0x20>
	{
		msg++;
 412:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 414:	88 81       	ld	r24, Y
 416:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 418:	88 30       	cpi	r24, 0x08	; 8
 41a:	28 f0       	brcs	.+10     	; 0x426 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 41c:	85 e2       	ldi	r24, 0x25	; 37
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>
			LCDData(*msg);
 424:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>
	}
	msg++;
 42c:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 42e:	88 81       	ld	r24, Y
 430:	88 23       	and	r24, r24
 432:	69 f7       	brne	.-38     	; 0x40e <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	df 93       	push	r29
 444:	cf 93       	push	r28
 446:	00 d0       	rcall	.+0      	; 0x448 <LCDWriteInt+0xe>
 448:	00 d0       	rcall	.+0      	; 0x44a <LCDWriteInt+0x10>
 44a:	0f 92       	push	r0
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	9c 01       	movw	r18, r24
 452:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 454:	fe 01       	movw	r30, r28
 456:	31 96       	adiw	r30, 0x01	; 1
 458:	85 e0       	ldi	r24, 0x05	; 5
 45a:	df 01       	movw	r26, r30
 45c:	1d 92       	st	X+, r1
 45e:	8a 95       	dec	r24
 460:	e9 f7       	brne	.-6      	; 0x45c <LCDWriteInt+0x22>
 462:	fe 01       	movw	r30, r28
 464:	35 96       	adiw	r30, 0x05	; 5
 466:	0d c0       	rjmp	.+26     	; 0x482 <__stack+0x23>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 468:	c9 01       	movw	r24, r18
 46a:	6a e0       	ldi	r22, 0x0A	; 10
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 472:	80 83       	st	Z, r24
	val=val/10;
 474:	c9 01       	movw	r24, r18
 476:	6a e0       	ldi	r22, 0x0A	; 10
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	0e 94 ce 02 	call	0x59c	; 0x59c <__divmodhi4>
 47e:	9b 01       	movw	r18, r22
 480:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 482:	21 15       	cp	r18, r1
 484:	31 05       	cpc	r19, r1
 486:	81 f7       	brne	.-32     	; 0x468 <__stack+0x9>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 488:	bf ef       	ldi	r27, 0xFF	; 255
 48a:	0f 3f       	cpi	r16, 0xFF	; 255
 48c:	1b 07       	cpc	r17, r27
 48e:	79 f4       	brne	.+30     	; 0x4ae <__stack+0x4f>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 494:	ae 01       	movw	r20, r28
 496:	4f 5f       	subi	r20, 0xFF	; 255
 498:	5f 4f       	sbci	r21, 0xFF	; 255
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__stack+0x41>
 49c:	2f 5f       	subi	r18, 0xFF	; 255
 49e:	3f 4f       	sbci	r19, 0xFF	; 255
 4a0:	fa 01       	movw	r30, r20
 4a2:	e2 0f       	add	r30, r18
 4a4:	f3 1f       	adc	r31, r19
 4a6:	80 81       	ld	r24, Z
 4a8:	88 23       	and	r24, r24
 4aa:	c1 f3       	breq	.-16     	; 0x49c <__stack+0x3d>
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__stack+0x57>
	else
		j=5-field_length;
 4ae:	25 e0       	ldi	r18, 0x05	; 5
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	20 1b       	sub	r18, r16
 4b4:	31 0b       	sbc	r19, r17
 4b6:	7e 01       	movw	r14, r28
 4b8:	08 94       	sec
 4ba:	e1 1c       	adc	r14, r1
 4bc:	f1 1c       	adc	r15, r1
 4be:	e2 0e       	add	r14, r18
 4c0:	f3 1e       	adc	r15, r19
 4c2:	89 01       	movw	r16, r18
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <__stack+0x79>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 4c6:	f7 01       	movw	r30, r14
 4c8:	81 91       	ld	r24, Z+
 4ca:	7f 01       	movw	r14, r30
 4cc:	80 5d       	subi	r24, 0xD0	; 208
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 4d4:	0f 5f       	subi	r16, 0xFF	; 255
 4d6:	1f 4f       	sbci	r17, 0xFF	; 255
 4d8:	05 30       	cpi	r16, 0x05	; 5
 4da:	11 05       	cpc	r17, r1
 4dc:	a4 f3       	brlt	.-24     	; 0x4c6 <__stack+0x67>
	{
	LCDData(48+str[i]);
	}
}
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	cf 91       	pop	r28
 4ea:	df 91       	pop	r29
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	ef 90       	pop	r14
 4f4:	08 95       	ret

000004f6 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 4f6:	84 31       	cpi	r24, 0x14	; 20
 4f8:	78 f4       	brcc	.+30     	; 0x518 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 4fa:	62 30       	cpi	r22, 0x02	; 2
 4fc:	31 f0       	breq	.+12     	; 0x50a <LCDGotoXY+0x14>
 4fe:	63 30       	cpi	r22, 0x03	; 3
 500:	31 f0       	breq	.+12     	; 0x50e <LCDGotoXY+0x18>
 502:	61 30       	cpi	r22, 0x01	; 1
 504:	29 f4       	brne	.+10     	; 0x510 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 506:	80 64       	ori	r24, 0x40	; 64
 508:	03 c0       	rjmp	.+6      	; 0x510 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 50a:	8c 5e       	subi	r24, 0xEC	; 236
 50c:	01 c0       	rjmp	.+2      	; 0x510 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 50e:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 510:	80 68       	ori	r24, 0x80	; 128
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>
 518:	08 95       	ret

0000051a <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 522:	8c e4       	ldi	r24, 0x4C	; 76
 524:	9d e1       	ldi	r25, 0x1D	; 29
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 52a:	84 b3       	in	r24, 0x14	; 20
 52c:	8f 60       	ori	r24, 0x0F	; 15
 52e:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 530:	a4 9a       	sbi	0x14, 4	; 20
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 532:	a5 9a       	sbi	0x14, 5	; 20
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 534:	a6 9a       	sbi	0x14, 6	; 20

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 536:	85 b3       	in	r24, 0x15	; 21
 538:	80 7f       	andi	r24, 0xF0	; 240
 53a:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 53c:	ac 98       	cbi	0x15, 4	; 21
	CLEAR_RW();
 53e:	ae 98       	cbi	0x15, 6	; 21
	CLEAR_RS();
 540:	ad 98       	cbi	0x15, 5	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	98 2f       	mov	r25, r24
 546:	9a 95       	dec	r25
 548:	f1 f7       	brne	.-4      	; 0x546 <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 54a:	ac 9a       	sbi	0x15, 4	; 21
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 54c:	a9 9a       	sbi	0x15, 1	; 21
 54e:	98 2f       	mov	r25, r24
 550:	9a 95       	dec	r25
 552:	f1 f7       	brne	.-4      	; 0x550 <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
 554:	ac 98       	cbi	0x15, 4	; 21
 556:	8a 95       	dec	r24
 558:	f1 f7       	brne	.-4      	; 0x556 <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 55a:	0e 94 b1 01 	call	0x362	; 0x362 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 55e:	81 2f       	mov	r24, r17
 560:	8c 60       	ori	r24, 0x0C	; 12
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 568:	88 e2       	ldi	r24, 0x28	; 40
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 570:	80 e4       	ldi	r24, 0x40	; 64
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>
 578:	c4 e7       	ldi	r28, 0x74	; 116
 57a:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 57c:	89 91       	ld	r24, Y+
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	0e 94 db 01 	call	0x3b6	; 0x3b6 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	c4 3b       	cpi	r28, 0xB4	; 180
 588:	d8 07       	cpc	r29, r24
 58a:	c1 f7       	brne	.-16     	; 0x57c <LCDInit+0x62>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCDGotoXY>

}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	08 95       	ret

0000059c <__divmodhi4>:
 59c:	97 fb       	bst	r25, 7
 59e:	09 2e       	mov	r0, r25
 5a0:	07 26       	eor	r0, r23
 5a2:	0a d0       	rcall	.+20     	; 0x5b8 <__divmodhi4_neg1>
 5a4:	77 fd       	sbrc	r23, 7
 5a6:	04 d0       	rcall	.+8      	; 0x5b0 <__divmodhi4_neg2>
 5a8:	27 d0       	rcall	.+78     	; 0x5f8 <__udivmodhi4>
 5aa:	06 d0       	rcall	.+12     	; 0x5b8 <__divmodhi4_neg1>
 5ac:	00 20       	and	r0, r0
 5ae:	1a f4       	brpl	.+6      	; 0x5b6 <__divmodhi4_exit>

000005b0 <__divmodhi4_neg2>:
 5b0:	70 95       	com	r23
 5b2:	61 95       	neg	r22
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255

000005b6 <__divmodhi4_exit>:
 5b6:	08 95       	ret

000005b8 <__divmodhi4_neg1>:
 5b8:	f6 f7       	brtc	.-4      	; 0x5b6 <__divmodhi4_exit>
 5ba:	90 95       	com	r25
 5bc:	81 95       	neg	r24
 5be:	9f 4f       	sbci	r25, 0xFF	; 255
 5c0:	08 95       	ret

000005c2 <__divmodsi4>:
 5c2:	97 fb       	bst	r25, 7
 5c4:	09 2e       	mov	r0, r25
 5c6:	05 26       	eor	r0, r21
 5c8:	0e d0       	rcall	.+28     	; 0x5e6 <__divmodsi4_neg1>
 5ca:	57 fd       	sbrc	r21, 7
 5cc:	04 d0       	rcall	.+8      	; 0x5d6 <__divmodsi4_neg2>
 5ce:	28 d0       	rcall	.+80     	; 0x620 <__udivmodsi4>
 5d0:	0a d0       	rcall	.+20     	; 0x5e6 <__divmodsi4_neg1>
 5d2:	00 1c       	adc	r0, r0
 5d4:	38 f4       	brcc	.+14     	; 0x5e4 <__divmodsi4_exit>

000005d6 <__divmodsi4_neg2>:
 5d6:	50 95       	com	r21
 5d8:	40 95       	com	r20
 5da:	30 95       	com	r19
 5dc:	21 95       	neg	r18
 5de:	3f 4f       	sbci	r19, 0xFF	; 255
 5e0:	4f 4f       	sbci	r20, 0xFF	; 255
 5e2:	5f 4f       	sbci	r21, 0xFF	; 255

000005e4 <__divmodsi4_exit>:
 5e4:	08 95       	ret

000005e6 <__divmodsi4_neg1>:
 5e6:	f6 f7       	brtc	.-4      	; 0x5e4 <__divmodsi4_exit>
 5e8:	90 95       	com	r25
 5ea:	80 95       	com	r24
 5ec:	70 95       	com	r23
 5ee:	61 95       	neg	r22
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__udivmodhi4>:
 5f8:	aa 1b       	sub	r26, r26
 5fa:	bb 1b       	sub	r27, r27
 5fc:	51 e1       	ldi	r21, 0x11	; 17
 5fe:	07 c0       	rjmp	.+14     	; 0x60e <__udivmodhi4_ep>

00000600 <__udivmodhi4_loop>:
 600:	aa 1f       	adc	r26, r26
 602:	bb 1f       	adc	r27, r27
 604:	a6 17       	cp	r26, r22
 606:	b7 07       	cpc	r27, r23
 608:	10 f0       	brcs	.+4      	; 0x60e <__udivmodhi4_ep>
 60a:	a6 1b       	sub	r26, r22
 60c:	b7 0b       	sbc	r27, r23

0000060e <__udivmodhi4_ep>:
 60e:	88 1f       	adc	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	5a 95       	dec	r21
 614:	a9 f7       	brne	.-22     	; 0x600 <__udivmodhi4_loop>
 616:	80 95       	com	r24
 618:	90 95       	com	r25
 61a:	bc 01       	movw	r22, r24
 61c:	cd 01       	movw	r24, r26
 61e:	08 95       	ret

00000620 <__udivmodsi4>:
 620:	a1 e2       	ldi	r26, 0x21	; 33
 622:	1a 2e       	mov	r1, r26
 624:	aa 1b       	sub	r26, r26
 626:	bb 1b       	sub	r27, r27
 628:	fd 01       	movw	r30, r26
 62a:	0d c0       	rjmp	.+26     	; 0x646 <__udivmodsi4_ep>

0000062c <__udivmodsi4_loop>:
 62c:	aa 1f       	adc	r26, r26
 62e:	bb 1f       	adc	r27, r27
 630:	ee 1f       	adc	r30, r30
 632:	ff 1f       	adc	r31, r31
 634:	a2 17       	cp	r26, r18
 636:	b3 07       	cpc	r27, r19
 638:	e4 07       	cpc	r30, r20
 63a:	f5 07       	cpc	r31, r21
 63c:	20 f0       	brcs	.+8      	; 0x646 <__udivmodsi4_ep>
 63e:	a2 1b       	sub	r26, r18
 640:	b3 0b       	sbc	r27, r19
 642:	e4 0b       	sbc	r30, r20
 644:	f5 0b       	sbc	r31, r21

00000646 <__udivmodsi4_ep>:
 646:	66 1f       	adc	r22, r22
 648:	77 1f       	adc	r23, r23
 64a:	88 1f       	adc	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	1a 94       	dec	r1
 650:	69 f7       	brne	.-38     	; 0x62c <__udivmodsi4_loop>
 652:	60 95       	com	r22
 654:	70 95       	com	r23
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	9b 01       	movw	r18, r22
 65c:	ac 01       	movw	r20, r24
 65e:	bd 01       	movw	r22, r26
 660:	cf 01       	movw	r24, r30
 662:	08 95       	ret

00000664 <_exit>:
 664:	f8 94       	cli

00000666 <__stop_program>:
 666:	ff cf       	rjmp	.-2      	; 0x666 <__stop_program>
