
linefollower_setpoint.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000056e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  0000056e  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008000ac  008000ac  0000064e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001bc  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cb  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c1  00000000  00000000  00001115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000648  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000245  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036b  00000000  00000000  00001d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac ea       	ldi	r26, 0xAC	; 172
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3d       	cpi	r26, 0xD4	; 212
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 14 01 	call	0x228	; 0x228 <main>
  8a:	0c 94 b5 02 	jmp	0x56a	; 0x56a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <motor>:
int left_speed=0;
int set_point=0;

int motor(int pl,int pr)
{
  powerr=pr;
  92:	79 bd       	out	0x29, r23	; 41
  94:	68 bd       	out	0x28, r22	; 40
  powerl=pl;
  96:	9b bd       	out	0x2b, r25	; 43
  98:	8a bd       	out	0x2a, r24	; 42
}
  9a:	08 95       	ret

0000009c <motor_init>:
void motor_init()
{
  ICR1=20000;
  9c:	80 e2       	ldi	r24, 0x20	; 32
  9e:	9e e4       	ldi	r25, 0x4E	; 78
  a0:	97 bd       	out	0x27, r25	; 39
  a2:	86 bd       	out	0x26, r24	; 38
  DDRD|=(1<<PD4)|(1<<PD5);
  a4:	81 b3       	in	r24, 0x11	; 17
  a6:	80 63       	ori	r24, 0x30	; 48
  a8:	81 bb       	out	0x11, r24	; 17
  //  the pins pd4 and pd5 for the PWM
  DDRD|=(1<<PD0)|(1<<PD1)|(1<<PD2)|(1<<PD3);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	81 bb       	out	0x11, r24	; 17
  PORTD=(1<<PD0)|(0<<PD1)|(1<<PD2)|(0<<PD3);
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	82 bb       	out	0x12, r24	; 18
  PORTD|=(0<<PD4)|(0<<PD5);
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	82 bb       	out	0x12, r24	; 18
  TCCR1A|=(0<<COM1A0)|(1<<COM1A1)|(0<<COM1B0)|(1<<COM1B1)|(0<<FOC1A)|(0<<FOC1B)|(0<<WGM11)|(1<<WGM10);
  b8:	8f b5       	in	r24, 0x2f	; 47
  ba:	81 6a       	ori	r24, 0xA1	; 161
  bc:	8f bd       	out	0x2f, r24	; 47
  TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	8a 60       	ori	r24, 0x0A	; 10
  c2:	8e bd       	out	0x2e, r24	; 46
}
  c4:	08 95       	ret

000000c6 <sensor_init>:
void sensor_init()
{
  //Port A pins as input for sensors
  DDRA=0X00;
  c6:	1a ba       	out	0x1a, r1	; 26
  //Enable internal pull ups
  PORTA=0XFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8b bb       	out	0x1b, r24	; 27
}
  cc:	08 95       	ret

000000ce <sensor_read>:
  LCDInit(LS_BLINK|LS_ULINE);
  LCDClear();
}
int sensor_read(int j)
{
 if(j==0)
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	51 f1       	breq	.+84     	; 0x126 <sensor_read+0x58>
 {

 return PINA0;
 }
 else if(j==1)
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	19 f4       	brne	.+6      	; 0xde <sensor_read+0x10>
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	26 c0       	rjmp	.+76     	; 0x12a <sensor_read+0x5c>
 {
     return(PINA1);
}
else if(j==2)
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	91 05       	cpc	r25, r1
  e2:	19 f4       	brne	.+6      	; 0xea <sensor_read+0x1c>
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	20 c0       	rjmp	.+64     	; 0x12a <sensor_read+0x5c>
{
    return(PINA2);
}
else if(j==3)
  ea:	83 30       	cpi	r24, 0x03	; 3
  ec:	91 05       	cpc	r25, r1
  ee:	19 f4       	brne	.+6      	; 0xf6 <sensor_read+0x28>
  f0:	23 e0       	ldi	r18, 0x03	; 3
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	1a c0       	rjmp	.+52     	; 0x12a <sensor_read+0x5c>
{
    return(PINA3);
}
else if(j==4)
  f6:	84 30       	cpi	r24, 0x04	; 4
  f8:	91 05       	cpc	r25, r1
  fa:	19 f4       	brne	.+6      	; 0x102 <sensor_read+0x34>
  fc:	24 e0       	ldi	r18, 0x04	; 4
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	14 c0       	rjmp	.+40     	; 0x12a <sensor_read+0x5c>
{
    return(PINA4);
}
else if(j==5)
 102:	85 30       	cpi	r24, 0x05	; 5
 104:	91 05       	cpc	r25, r1
 106:	19 f4       	brne	.+6      	; 0x10e <sensor_read+0x40>
 108:	25 e0       	ldi	r18, 0x05	; 5
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	0e c0       	rjmp	.+28     	; 0x12a <sensor_read+0x5c>
{
    return(PINA5);
}
else if(j==6)
 10e:	86 30       	cpi	r24, 0x06	; 6
 110:	91 05       	cpc	r25, r1
 112:	19 f4       	brne	.+6      	; 0x11a <sensor_read+0x4c>
 114:	26 e0       	ldi	r18, 0x06	; 6
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	08 c0       	rjmp	.+16     	; 0x12a <sensor_read+0x5c>
{
    return(PINA6);
}
else if(j==7)
 11a:	07 97       	sbiw	r24, 0x07	; 7
 11c:	19 f4       	brne	.+6      	; 0x124 <sensor_read+0x56>
 11e:	27 e0       	ldi	r18, 0x07	; 7
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	03 c0       	rjmp	.+6      	; 0x12a <sensor_read+0x5c>
 124:	08 95       	ret
{
    return(PINA7);
}
}
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	c9 01       	movw	r24, r18
 12c:	08 95       	ret

0000012e <sensor_cal>:
void sensor_cal()
{
 12e:	8f 92       	push	r8
 130:	9f 92       	push	r9
 132:	af 92       	push	r10
 134:	bf 92       	push	r11
 136:	cf 92       	push	r12
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	c0 90 b0 00 	lds	r12, 0x00B0
 14a:	d0 90 b1 00 	lds	r13, 0x00B1
 14e:	e0 90 ac 00 	lds	r14, 0x00AC
 152:	f0 90 ad 00 	lds	r15, 0x00AD
 156:	00 91 ae 00 	lds	r16, 0x00AE
 15a:	10 91 af 00 	lds	r17, 0x00AF
 15e:	94 ec       	ldi	r25, 0xC4	; 196
 160:	a9 2e       	mov	r10, r25
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	b9 2e       	mov	r11, r25
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
    int i=0;
    for(i=0;i<8;i++)
    {
        sensor[i]=sensor_read(i);
        sensor_avarage=(int)(sensor_avarage+sensor[i]*i*1000);
 16a:	88 ee       	ldi	r24, 0xE8	; 232
 16c:	88 2e       	mov	r8, r24
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	98 2e       	mov	r9, r24
void sensor_cal()
{
    int i=0;
    for(i=0;i<8;i++)
    {
        sensor[i]=sensor_read(i);
 172:	ce 01       	movw	r24, r28
 174:	0e 94 67 00 	call	0xce	; 0xce <sensor_read>
 178:	f5 01       	movw	r30, r10
 17a:	81 93       	st	Z+, r24
 17c:	91 93       	st	Z+, r25
 17e:	5f 01       	movw	r10, r30
        sensor_avarage=(int)(sensor_avarage+sensor[i]*i*1000);
 180:	88 9d       	mul	r24, r8
 182:	90 01       	movw	r18, r0
 184:	89 9d       	mul	r24, r9
 186:	30 0d       	add	r19, r0
 188:	98 9d       	mul	r25, r8
 18a:	30 0d       	add	r19, r0
 18c:	11 24       	eor	r1, r1
 18e:	a9 01       	movw	r20, r18
 190:	4c 9f       	mul	r20, r28
 192:	90 01       	movw	r18, r0
 194:	4d 9f       	mul	r20, r29
 196:	30 0d       	add	r19, r0
 198:	5c 9f       	mul	r21, r28
 19a:	30 0d       	add	r19, r0
 19c:	11 24       	eor	r1, r1
 19e:	2e 0d       	add	r18, r14
 1a0:	3f 1d       	adc	r19, r15
 1a2:	79 01       	movw	r14, r18
 1a4:	00 27       	eor	r16, r16
 1a6:	f7 fc       	sbrc	r15, 7
 1a8:	00 95       	com	r16
 1aa:	10 2f       	mov	r17, r16
        sensor_sum+=(int)(sensor[i]);
 1ac:	c8 0e       	add	r12, r24
 1ae:	d9 1e       	adc	r13, r25
}
}
void sensor_cal()
{
    int i=0;
    for(i=0;i<8;i++)
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	c8 30       	cpi	r28, 0x08	; 8
 1b4:	d1 05       	cpc	r29, r1
 1b6:	e9 f6       	brne	.-70     	; 0x172 <sensor_cal+0x44>
 1b8:	d0 92 b1 00 	sts	0x00B1, r13
 1bc:	c0 92 b0 00 	sts	0x00B0, r12
 1c0:	e0 92 ac 00 	sts	0x00AC, r14
 1c4:	f0 92 ad 00 	sts	0x00AD, r15
 1c8:	00 93 ae 00 	sts	0x00AE, r16
 1cc:	10 93 af 00 	sts	0x00AF, r17


    }


}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	df 90       	pop	r13
 1de:	cf 90       	pop	r12
 1e0:	bf 90       	pop	r11
 1e2:	af 90       	pop	r10
 1e4:	9f 90       	pop	r9
 1e6:	8f 90       	pop	r8
 1e8:	08 95       	ret

000001ea <pid_calc>:
 void pid_calc()
    {
        position=(int)(sensor_avarage/sensor_sum);
 1ea:	20 91 b0 00 	lds	r18, 0x00B0
 1ee:	30 91 b1 00 	lds	r19, 0x00B1
 1f2:	44 27       	eor	r20, r20
 1f4:	37 fd       	sbrc	r19, 7
 1f6:	40 95       	com	r20
 1f8:	54 2f       	mov	r21, r20
 1fa:	60 91 ac 00 	lds	r22, 0x00AC
 1fe:	70 91 ad 00 	lds	r23, 0x00AD
 202:	80 91 ae 00 	lds	r24, 0x00AE
 206:	90 91 af 00 	lds	r25, 0x00AF
 20a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__divmodsi4>
 20e:	30 93 b3 00 	sts	0x00B3, r19
 212:	20 93 b2 00 	sts	0x00B2, r18

    }
 216:	08 95       	ret

00000218 <lcd_init>:
  //Enable internal pull ups
  PORTA=0XFF;
}
void lcd_init()
{
  LCDInit(LS_BLINK|LS_ULINE);
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 10 02 	call	0x420	; 0x420 <LCDInit>
  LCDClear();
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>
}
 226:	08 95       	ret

00000228 <main>:
  TCCR1B|=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(0<<CS10);
}
void sensor_init()
{
  //Port A pins as input for sensors
  DDRA=0X00;
 228:	1a ba       	out	0x1a, r1	; 26
  //Enable internal pull ups
  PORTA=0XFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	8b bb       	out	0x1b, r24	; 27

void main()
{

  sensor_init();
  motor_init();
 22e:	0e 94 4e 00 	call	0x9c	; 0x9c <motor_init>
  lcd_init();
 232:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_init>
  while(1)
  {
      sensor_cal();
 236:	0e 94 97 00 	call	0x12e	; 0x12e <sensor_cal>
      pid_calc();
 23a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <pid_calc>
	  LCDWriteStringXY(3,0,"SET POINT");
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCDGotoXY>
 246:	80 e6       	ldi	r24, 0x60	; 96
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 86 01 	call	0x30c	; 0x30c <LCDWriteString>
	  LCDWriteIntXY(4,1,position,5);
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	61 e0       	ldi	r22, 0x01	; 1
 252:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCDGotoXY>
 256:	80 91 b2 00 	lds	r24, 0x00B2
 25a:	90 91 b3 00 	lds	r25, 0x00B3
 25e:	65 e0       	ldi	r22, 0x05	; 5
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	0e 94 a0 01 	call	0x340	; 0x340 <LCDWriteInt>
 266:	e7 cf       	rjmp	.-50     	; 0x236 <main+0xe>

00000268 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 268:	84 b3       	in	r24, 0x14	; 20
 26a:	80 7f       	andi	r24, 0xF0	; 240
 26c:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 26e:	ad 9a       	sbi	0x15, 5	; 21
	CLEAR_RS();		//Read status
 270:	ae 98       	cbi	0x15, 6	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	8a 95       	dec	r24
 276:	f1 f7       	brne	.-4      	; 0x274 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	ac 9a       	sbi	0x15, 4	; 21
 27c:	82 2f       	mov	r24, r18
 27e:	8a 95       	dec	r24
 280:	f1 f7       	brne	.-4      	; 0x27e <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 282:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 284:	82 95       	swap	r24
 286:	80 7f       	andi	r24, 0xF0	; 240
 288:	92 2f       	mov	r25, r18
 28a:	9a 95       	dec	r25
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 28e:	ac 98       	cbi	0x15, 4	; 21
 290:	92 2f       	mov	r25, r18
 292:	9a 95       	dec	r25
 294:	f1 f7       	brne	.-4      	; 0x292 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 296:	ac 9a       	sbi	0x15, 4	; 21
 298:	92 2f       	mov	r25, r18
 29a:	9a 95       	dec	r25
 29c:	f1 f7       	brne	.-4      	; 0x29a <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 29e:	93 b3       	in	r25, 0x13	; 19
 2a0:	92 2f       	mov	r25, r18
 2a2:	9a 95       	dec	r25
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 2a6:	ac 98       	cbi	0x15, 4	; 21
 2a8:	92 2f       	mov	r25, r18
 2aa:	9a 95       	dec	r25
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 2ae:	87 fd       	sbrc	r24, 7
 2b0:	e4 cf       	rjmp	.-56     	; 0x27a <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 2b2:	ad 98       	cbi	0x15, 5	; 21
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 2b4:	84 b3       	in	r24, 0x14	; 20
 2b6:	8f 60       	ori	r24, 0x0F	; 15
 2b8:	84 bb       	out	0x14, r24	; 20

}
 2ba:	08 95       	ret

000002bc <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
 2bc:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 2be:	66 23       	and	r22, r22
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <LCDByte+0xa>
	CLEAR_RS();
 2c2:	ae 98       	cbi	0x15, 6	; 21
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <LCDByte+0xc>
else
	SET_RS();
 2c6:	ae 9a       	sbi	0x15, 6	; 21
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	82 2f       	mov	r24, r18
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 2d0:	ac 9a       	sbi	0x15, 4	; 21

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 2d2:	85 b3       	in	r24, 0x15	; 21
 2d4:	93 2f       	mov	r25, r19
 2d6:	92 95       	swap	r25
 2d8:	9f 70       	andi	r25, 0x0F	; 15
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 2de:	95 bb       	out	0x15, r25	; 21
 2e0:	82 2f       	mov	r24, r18
 2e2:	8a 95       	dec	r24
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 2e6:	ac 98       	cbi	0x15, 4	; 21
 2e8:	82 2f       	mov	r24, r18
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 2ee:	ac 9a       	sbi	0x15, 4	; 21

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 2f0:	85 b3       	in	r24, 0x15	; 21
 2f2:	3f 70       	andi	r19, 0x0F	; 15
 2f4:	80 7f       	andi	r24, 0xF0	; 240
 2f6:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 2f8:	85 bb       	out	0x15, r24	; 21
 2fa:	82 2f       	mov	r24, r18
 2fc:	8a 95       	dec	r24
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 300:	ac 98       	cbi	0x15, 4	; 21
 302:	2a 95       	dec	r18
 304:	f1 f7       	brne	.-4      	; 0x302 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 306:	0e 94 34 01 	call	0x268	; 0x268 <LCDBusyLoop>
}
 30a:	08 95       	ret

0000030c <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	ec 01       	movw	r28, r24
 312:	10 c0       	rjmp	.+32     	; 0x334 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 314:	85 32       	cpi	r24, 0x25	; 37
 316:	51 f4       	brne	.+20     	; 0x32c <LCDWriteString+0x20>
	{
		msg++;
 318:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 31a:	88 81       	ld	r24, Y
 31c:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 31e:	88 30       	cpi	r24, 0x08	; 8
 320:	28 f0       	brcs	.+10     	; 0x32c <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 322:	85 e2       	ldi	r24, 0x25	; 37
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>
			LCDData(*msg);
 32a:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>
	}
	msg++;
 332:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 334:	88 81       	ld	r24, Y
 336:	88 23       	and	r24, r24
 338:	69 f7       	brne	.-38     	; 0x314 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 340:	ef 92       	push	r14
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	df 93       	push	r29
 34a:	cf 93       	push	r28
 34c:	00 d0       	rcall	.+0      	; 0x34e <LCDWriteInt+0xe>
 34e:	00 d0       	rcall	.+0      	; 0x350 <LCDWriteInt+0x10>
 350:	0f 92       	push	r0
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	9c 01       	movw	r18, r24
 358:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 35a:	fe 01       	movw	r30, r28
 35c:	31 96       	adiw	r30, 0x01	; 1
 35e:	85 e0       	ldi	r24, 0x05	; 5
 360:	df 01       	movw	r26, r30
 362:	1d 92       	st	X+, r1
 364:	8a 95       	dec	r24
 366:	e9 f7       	brne	.-6      	; 0x362 <LCDWriteInt+0x22>
 368:	fe 01       	movw	r30, r28
 36a:	35 96       	adiw	r30, 0x05	; 5
 36c:	0d c0       	rjmp	.+26     	; 0x388 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 36e:	c9 01       	movw	r24, r18
 370:	6a e0       	ldi	r22, 0x0A	; 10
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__divmodhi4>
 378:	80 83       	st	Z, r24
	val=val/10;
 37a:	c9 01       	movw	r24, r18
 37c:	6a e0       	ldi	r22, 0x0A	; 10
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__divmodhi4>
 384:	9b 01       	movw	r18, r22
 386:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 388:	21 15       	cp	r18, r1
 38a:	31 05       	cpc	r19, r1
 38c:	81 f7       	brne	.-32     	; 0x36e <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 38e:	bf ef       	ldi	r27, 0xFF	; 255
 390:	0f 3f       	cpi	r16, 0xFF	; 255
 392:	1b 07       	cpc	r17, r27
 394:	79 f4       	brne	.+30     	; 0x3b4 <LCDWriteInt+0x74>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 39a:	ae 01       	movw	r20, r28
 39c:	4f 5f       	subi	r20, 0xFF	; 255
 39e:	5f 4f       	sbci	r21, 0xFF	; 255
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <LCDWriteInt+0x66>
 3a2:	2f 5f       	subi	r18, 0xFF	; 255
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	fa 01       	movw	r30, r20
 3a8:	e2 0f       	add	r30, r18
 3aa:	f3 1f       	adc	r31, r19
 3ac:	80 81       	ld	r24, Z
 3ae:	88 23       	and	r24, r24
 3b0:	c1 f3       	breq	.-16     	; 0x3a2 <LCDWriteInt+0x62>
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 3b4:	25 e0       	ldi	r18, 0x05	; 5
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	20 1b       	sub	r18, r16
 3ba:	31 0b       	sbc	r19, r17
 3bc:	7e 01       	movw	r14, r28
 3be:	08 94       	sec
 3c0:	e1 1c       	adc	r14, r1
 3c2:	f1 1c       	adc	r15, r1
 3c4:	e2 0e       	add	r14, r18
 3c6:	f3 1e       	adc	r15, r19
 3c8:	89 01       	movw	r16, r18
 3ca:	09 c0       	rjmp	.+18     	; 0x3de <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 3cc:	f7 01       	movw	r30, r14
 3ce:	81 91       	ld	r24, Z+
 3d0:	7f 01       	movw	r14, r30
 3d2:	80 5d       	subi	r24, 0xD0	; 208
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 3da:	0f 5f       	subi	r16, 0xFF	; 255
 3dc:	1f 4f       	sbci	r17, 0xFF	; 255
 3de:	05 30       	cpi	r16, 0x05	; 5
 3e0:	11 05       	cpc	r17, r1
 3e2:	a4 f3       	brlt	.-24     	; 0x3cc <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	cf 91       	pop	r28
 3f0:	df 91       	pop	r29
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	08 95       	ret

000003fc <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 3fc:	84 31       	cpi	r24, 0x14	; 20
 3fe:	78 f4       	brcc	.+30     	; 0x41e <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 400:	62 30       	cpi	r22, 0x02	; 2
 402:	31 f0       	breq	.+12     	; 0x410 <LCDGotoXY+0x14>
 404:	63 30       	cpi	r22, 0x03	; 3
 406:	31 f0       	breq	.+12     	; 0x414 <LCDGotoXY+0x18>
 408:	61 30       	cpi	r22, 0x01	; 1
 40a:	29 f4       	brne	.+10     	; 0x416 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 40c:	80 64       	ori	r24, 0x40	; 64
 40e:	03 c0       	rjmp	.+6      	; 0x416 <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 410:	8c 5e       	subi	r24, 0xEC	; 236
 412:	01 c0       	rjmp	.+2      	; 0x416 <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 414:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 416:	80 68       	ori	r24, 0x80	; 128
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>
 41e:	08 95       	ret

00000420 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 420:	1f 93       	push	r17
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 428:	8c e4       	ldi	r24, 0x4C	; 76
 42a:	9d e1       	ldi	r25, 0x1D	; 29
 42c:	01 97       	sbiw	r24, 0x01	; 1
 42e:	f1 f7       	brne	.-4      	; 0x42c <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 430:	84 b3       	in	r24, 0x14	; 20
 432:	8f 60       	ori	r24, 0x0F	; 15
 434:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 436:	a4 9a       	sbi	0x14, 4	; 20
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 438:	a6 9a       	sbi	0x14, 6	; 20
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 43a:	a5 9a       	sbi	0x14, 5	; 20

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 43c:	85 b3       	in	r24, 0x15	; 21
 43e:	80 7f       	andi	r24, 0xF0	; 240
 440:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 442:	ac 98       	cbi	0x15, 4	; 21
	CLEAR_RW();
 444:	ad 98       	cbi	0x15, 5	; 21
	CLEAR_RS();
 446:	ae 98       	cbi	0x15, 6	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	98 2f       	mov	r25, r24
 44c:	9a 95       	dec	r25
 44e:	f1 f7       	brne	.-4      	; 0x44c <LCDInit+0x2c>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 450:	ac 9a       	sbi	0x15, 4	; 21
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 452:	a9 9a       	sbi	0x15, 1	; 21
 454:	98 2f       	mov	r25, r24
 456:	9a 95       	dec	r25
 458:	f1 f7       	brne	.-4      	; 0x456 <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
 45a:	ac 98       	cbi	0x15, 4	; 21
 45c:	8a 95       	dec	r24
 45e:	f1 f7       	brne	.-4      	; 0x45c <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 460:	0e 94 34 01 	call	0x268	; 0x268 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 464:	81 2f       	mov	r24, r17
 466:	8c 60       	ori	r24, 0x0C	; 12
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 46e:	88 e2       	ldi	r24, 0x28	; 40
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 476:	80 e4       	ldi	r24, 0x40	; 64
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>
 47e:	cc e6       	ldi	r28, 0x6C	; 108
 480:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 482:	89 91       	ld	r24, Y+
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	cc 3a       	cpi	r28, 0xAC	; 172
 48e:	d8 07       	cpc	r29, r24
 490:	c1 f7       	brne	.-16     	; 0x482 <__stack+0x23>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCDGotoXY>

}
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	08 95       	ret

000004a2 <__divmodhi4>:
 4a2:	97 fb       	bst	r25, 7
 4a4:	09 2e       	mov	r0, r25
 4a6:	07 26       	eor	r0, r23
 4a8:	0a d0       	rcall	.+20     	; 0x4be <__divmodhi4_neg1>
 4aa:	77 fd       	sbrc	r23, 7
 4ac:	04 d0       	rcall	.+8      	; 0x4b6 <__divmodhi4_neg2>
 4ae:	27 d0       	rcall	.+78     	; 0x4fe <__udivmodhi4>
 4b0:	06 d0       	rcall	.+12     	; 0x4be <__divmodhi4_neg1>
 4b2:	00 20       	and	r0, r0
 4b4:	1a f4       	brpl	.+6      	; 0x4bc <__divmodhi4_exit>

000004b6 <__divmodhi4_neg2>:
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255

000004bc <__divmodhi4_exit>:
 4bc:	08 95       	ret

000004be <__divmodhi4_neg1>:
 4be:	f6 f7       	brtc	.-4      	; 0x4bc <__divmodhi4_exit>
 4c0:	90 95       	com	r25
 4c2:	81 95       	neg	r24
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	08 95       	ret

000004c8 <__divmodsi4>:
 4c8:	97 fb       	bst	r25, 7
 4ca:	09 2e       	mov	r0, r25
 4cc:	05 26       	eor	r0, r21
 4ce:	0e d0       	rcall	.+28     	; 0x4ec <__divmodsi4_neg1>
 4d0:	57 fd       	sbrc	r21, 7
 4d2:	04 d0       	rcall	.+8      	; 0x4dc <__divmodsi4_neg2>
 4d4:	28 d0       	rcall	.+80     	; 0x526 <__udivmodsi4>
 4d6:	0a d0       	rcall	.+20     	; 0x4ec <__divmodsi4_neg1>
 4d8:	00 1c       	adc	r0, r0
 4da:	38 f4       	brcc	.+14     	; 0x4ea <__divmodsi4_exit>

000004dc <__divmodsi4_neg2>:
 4dc:	50 95       	com	r21
 4de:	40 95       	com	r20
 4e0:	30 95       	com	r19
 4e2:	21 95       	neg	r18
 4e4:	3f 4f       	sbci	r19, 0xFF	; 255
 4e6:	4f 4f       	sbci	r20, 0xFF	; 255
 4e8:	5f 4f       	sbci	r21, 0xFF	; 255

000004ea <__divmodsi4_exit>:
 4ea:	08 95       	ret

000004ec <__divmodsi4_neg1>:
 4ec:	f6 f7       	brtc	.-4      	; 0x4ea <__divmodsi4_exit>
 4ee:	90 95       	com	r25
 4f0:	80 95       	com	r24
 4f2:	70 95       	com	r23
 4f4:	61 95       	neg	r22
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8f 4f       	sbci	r24, 0xFF	; 255
 4fa:	9f 4f       	sbci	r25, 0xFF	; 255
 4fc:	08 95       	ret

000004fe <__udivmodhi4>:
 4fe:	aa 1b       	sub	r26, r26
 500:	bb 1b       	sub	r27, r27
 502:	51 e1       	ldi	r21, 0x11	; 17
 504:	07 c0       	rjmp	.+14     	; 0x514 <__udivmodhi4_ep>

00000506 <__udivmodhi4_loop>:
 506:	aa 1f       	adc	r26, r26
 508:	bb 1f       	adc	r27, r27
 50a:	a6 17       	cp	r26, r22
 50c:	b7 07       	cpc	r27, r23
 50e:	10 f0       	brcs	.+4      	; 0x514 <__udivmodhi4_ep>
 510:	a6 1b       	sub	r26, r22
 512:	b7 0b       	sbc	r27, r23

00000514 <__udivmodhi4_ep>:
 514:	88 1f       	adc	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	5a 95       	dec	r21
 51a:	a9 f7       	brne	.-22     	; 0x506 <__udivmodhi4_loop>
 51c:	80 95       	com	r24
 51e:	90 95       	com	r25
 520:	bc 01       	movw	r22, r24
 522:	cd 01       	movw	r24, r26
 524:	08 95       	ret

00000526 <__udivmodsi4>:
 526:	a1 e2       	ldi	r26, 0x21	; 33
 528:	1a 2e       	mov	r1, r26
 52a:	aa 1b       	sub	r26, r26
 52c:	bb 1b       	sub	r27, r27
 52e:	fd 01       	movw	r30, r26
 530:	0d c0       	rjmp	.+26     	; 0x54c <__udivmodsi4_ep>

00000532 <__udivmodsi4_loop>:
 532:	aa 1f       	adc	r26, r26
 534:	bb 1f       	adc	r27, r27
 536:	ee 1f       	adc	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	a2 17       	cp	r26, r18
 53c:	b3 07       	cpc	r27, r19
 53e:	e4 07       	cpc	r30, r20
 540:	f5 07       	cpc	r31, r21
 542:	20 f0       	brcs	.+8      	; 0x54c <__udivmodsi4_ep>
 544:	a2 1b       	sub	r26, r18
 546:	b3 0b       	sbc	r27, r19
 548:	e4 0b       	sbc	r30, r20
 54a:	f5 0b       	sbc	r31, r21

0000054c <__udivmodsi4_ep>:
 54c:	66 1f       	adc	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	1a 94       	dec	r1
 556:	69 f7       	brne	.-38     	; 0x532 <__udivmodsi4_loop>
 558:	60 95       	com	r22
 55a:	70 95       	com	r23
 55c:	80 95       	com	r24
 55e:	90 95       	com	r25
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	bd 01       	movw	r22, r26
 566:	cf 01       	movw	r24, r30
 568:	08 95       	ret

0000056a <_exit>:
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
